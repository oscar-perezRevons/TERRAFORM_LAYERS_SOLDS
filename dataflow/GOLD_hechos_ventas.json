{
	"name": "GOLD_hechos_ventas",
	"properties": {
		"folder": {
			"name": "GOLD"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Silver_detalle_ventas",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Silver_productos",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Gold_dim_hechos_ventas",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          sls_ord_num as integer,",
				"          sls_prd_key as string,",
				"          sls_cust_id as integer,",
				"          sls_sales as integer,",
				"          sls_quantity as integer,",
				"          sls_price as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT sls_ord_num, sls_prd_key, sls_cust_id, sls_sales, sls_quantity, sls_price FROM SILVER.DETALLE_VENTAS',",
				"     format: 'query') ~> source1",
				"source(output(",
				"          prd_id as integer,",
				"          prd_key as string,",
				"          prd_nm as string,",
				"          prd_cost as integer,",
				"          prd_line as string,",
				"          prd_key_last as string,",
				"          prd_cat_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1, source2 join(sls_prd_key == prd_key_last,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          sls_ord_num,",
				"          sls_cust_id,",
				"          sls_sales,",
				"          sls_quantity,",
				"          sls_price,",
				"          prd_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(!isNull(sls_ord_num)",
				"&& !isNull(sls_cust_id)",
				"&& !isNull(sls_sales)",
				"&& !isNull(sls_quantity)",
				"&& !isNull(sls_price)",
				"&& !isNull(prd_id)) ~> filter1",
				"filter1 aggregate(groupBy(sls_ord_num),",
				"     sls_cust_id = first(sls_cust_id),",
				"          sls_sales = first(sls_sales),",
				"          sls_quantity = first(sls_quantity),",
				"          sls_price = first(sls_price),",
				"          prd_id = first(prd_id)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id_Venta as integer,",
				"          Id_Producto as integer,",
				"          Id_Cliente as integer,",
				"          Numero_Orden as integer,",
				"          Cantidad as integer,",
				"          Precio as integer,",
				"          Monto_Venta as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Id_Producto = prd_id,",
				"          Id_Cliente = sls_cust_id,",
				"          Numero_Orden = sls_ord_num,",
				"          Cantidad = sls_quantity,",
				"          Precio = sls_price,",
				"          Monto_Venta = sls_sales",
				"     )) ~> sink1"
			]
		}
	}
}