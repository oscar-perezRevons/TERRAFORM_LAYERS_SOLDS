{
	"name": "SILVER_df_productos",
	"properties": {
		"folder": {
			"name": "SILVER"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze_sql_productos",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Silver_productos",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "cast1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          prd_id as string,",
				"          prd_key as string,",
				"          prd_nm as string,",
				"          prd_cost as string,",
				"          prd_line as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT prd_id, prd_key, prd_nm, prd_cost, prd_line FROM BRONZE.PRODUCTOS',",
				"     format: 'query') ~> source1",
				"source1 derive(prd_cat_id = iif(\r",
				"  !isNull(prd_key) && trim(prd_key) != '' && size(split(prd_key, '-')) >= 2,\r",
				"  split(prd_key, '-')[1] + '-' + split(prd_key, '-')[2],\r",
				"  ''\r",
				"),",
				"          prd_key_last = iif(\r",
				"  size(split(prd_key, '-')) == 3,\r",
				"    split(prd_key, '-')[3],\r",
				"  iif(\r",
				"    size(split(prd_key, '-')) == 4,\r",
				"      split(prd_key, '-')[3] + '-' + split(prd_key, '-')[4],\r",
				"    iif(\r",
				"      size(split(prd_key, '-')) == 5,\r",
				"        split(prd_key, '-')[3] + '-' + split(prd_key, '-')[4] + '-' + split(prd_key, '-')[5],\r",
				"      iif(\r",
				"        size(split(prd_key, '-')) == 6,\r",
				"          split(prd_key, '-')[3] + '-' + split(prd_key, '-')[4] + '-' + split(prd_key, '-')[5] + '-' + split(prd_key, '-')[6],\r",
				"        ''\r",
				"      )\r",
				"    )\r",
				"  )\r",
				")) ~> derivedColumn1",
				"derivedColumn1 filter(!isNull(prd_id) && trim(prd_id) != ''",
				"&& !isNull(prd_key) && trim(prd_key) != ''",
				"&& !isNull(prd_nm) && trim(prd_nm) != ''",
				"&& !isNull(prd_cost) && trim(prd_cost) != ''",
				"&& !isNull(prd_line) && trim(prd_line) != ''",
				"&& !isNull(prd_cat_id) && trim(prd_cat_id) != ''",
				"&& !isNull(prd_key_last) && trim(prd_key_last) != '') ~> filter1",
				"filter1 cast(output(",
				"          prd_id as integer,",
				"          prd_cost as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          prd_id as integer,",
				"          prd_key as string,",
				"          prd_nm as string,",
				"          prd_cost as integer,",
				"          prd_line as string,",
				"          prd_key_last as string,",
				"          prd_cat_id as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          prd_id,",
				"          prd_key,",
				"          prd_nm,",
				"          prd_cost,",
				"          prd_line,",
				"          prd_key_last,",
				"          prd_cat_id",
				"     )) ~> sink1"
			]
		}
	}
}